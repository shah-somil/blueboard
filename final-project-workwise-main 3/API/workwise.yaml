openapi: 3.0.3
info:
  title: INFO6150 - Web Design and User Experience Engineering Final Project || WORKWISE
  description: 
    WorkWise is a project management application that guarantees streamlined project planning and execution, effortless backlog management, and keeps your team synchronized with its intuitive and potent features.
  version: "1.0.0"
externalDocs:
  description: Github Source
  url: https://github.com/info-6150-fall-2023/final-project-workwise
servers:
  - url: http://localhost:3000/
tags:
  - name: users
    description: User endpoints
  - name: projects
    description: Project endpoints
  - name: workitems
    description: WorkItem endpoints
  - name: comments
    description: Comment endpoints
  - name: tasks
    description: Task endpoints
  - name: auth
    description: Authentication endpoint
paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Get all users
      operationId: getallusers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
  /users/{id}:
    get:
      tags:
        - users
      summary: Get  user data by _id
      description: Get  user data by _id
      operationId: getuserbyid
      parameters:
        - name: _id
          in: path
          description: 'Get  user data by _id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved user data by _id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
    put:
      tags:
        - users
      summary: Update user details
      description: Update user details
      operationId: updateuser
      parameters:
        - name: _id
          in: path
          description: 'Update user'
          required: true
          schema:
            type: string
      requestBody:
        description: updated user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Updated user data
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found!
        '500':
          description: Internal server error
    delete:
      tags:
        - users
      summary: Delete user 
      description: Delete user 
      operationId: deleteuser
      parameters:
        - name: _id
          in: path
          description: 'Delete user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted!
        '404':
          description: User not found!
        '500':
          description: Internal server error
  /users/{id}/projects:
    get:
      tags:
        - users
      summary: Get all the projects of the user
      description: Get all the projects of the user
      operationId: getuserprojects
      parameters:
        - name: _id
          in: path
          description: 'Get all the projects of the user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved projects data of the user
          content:
            application/json:
              schema:
                 type: array
                 items:
                  $ref: '#/components/schemas/Project'  
        '500':
          description: Internal server error
  /projects:
    post:
      tags:
        - projects
      summary: Create a project
      description: Create a project
      operationId: createaproject
      requestBody:
        description: Create a project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
        '400':
          description: Required data not provided
  /projects/{_id}:
    get:
      tags:
        - projects
      summary: Fetch project by _id
      description: Fetch project by _id
      operationId: fetchprojectbyid
      parameters:
        - name: _id
          in: path
          description: 'Fetch project by _id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved project by _id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: Internal server error
    put:
      tags:
        - projects
      summary: Update a project
      description: Update a project
      operationId: updateaproject
      parameters:
        - name: _id
          in: path
          description: 'Update a project'
          required: true
          schema:
            type: string
      requestBody:
        description: Update a project
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
        '400':
          description:  Project not found
        '404':
          description: Project not found
    delete:
      tags:
        - projects
      summary: Delete Project
      description: Delete project
      operationId: deleteaproject
      parameters:
        - name: _id
          in: path
          description: 'Delete a Project'
          required: true
          schema:
            type: array
      responses:
        '200':
          description: Project deleted!
        '404':
          description: Project not found!
    
 
  /projects/{_id}/workitems:
     get:
      tags:
        - projects
      summary: Fetch workitems of a project
      description: Fetch workitems of a project
      operationId: fetchworkitems
      parameters:
        - name: _id
          in: path
          description: 'Fetch workitems of a project'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved workitems of a project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: Internal server error
   

  /workitems:
    post:
      tags:
        - workitems
      summary: Create a workitem
      description: Create a workitem
      operationId: createaworkitem
      requestBody:
        description: Create a workitem
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkItem'
        required: true
      responses:
        '201':
          description: WorkItem created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItem'          
        '400':
          description: Required data not provide
  /workitems/{_id}:
    get:
      tags:
        - workitems
      summary: Fetch workitems by _id
      description: Fetch workitems by _id
      operationId: fetchworkitemsbyid
      parameters:
        - name: _id
          in: path
          description: 'Fetch workitem by _id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved all workitems by _id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkItem'
        '500':
          description: Internal server error
    put:
      tags:
        - workitems
      summary: Update a workitem
      description: Update a workitem
      operationId: updateaworkitem
      parameters:
        - name: _id
          in: path
          description: 'Update a workitem'
          required: true
          schema:
            type: string
      requestBody:
        description: Update a workitem
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: WorkItem updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItem'          
        '400':
          description:  WorkItem not found
        '404':
          description: WorkItem not found
    delete:
      tags:
        - workitems
      summary: Delete WorkItem
      description: Delete work item
      operationId: deleteaworkitem
      parameters:
        - name: _id
          in: path
          description: 'Delete a workitem'
          required: true
          schema:
            type: array
      responses:
        '200':
          description: WorkItem deleted!
        '404':
          description: WorkItem not found!
 
    
  /tasks:
    post:
      tags:
        - tasks
      summary: Create a task
      description: create a task
      operationId: createatask
      requestBody:
        description: Create a task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
  /tasks/{_id}:
    put:
      tags:
        - tasks
      summary: Update a task
      description: Update task by _id
      parameters:
        - name: _id
          in: path
          description: 'Update a task by _id'
          required: true
          schema:
            type: string
      requestBody:
        description: update a task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Update task by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found!
        '500':
          description: Internal server error
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: Delete task 
      parameters:
        - name: _id
          in: path
          description: 'Delete a task by _id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted!
        '404':
          description: Task not found!
        '500':
          description: Internal server error

  /comments:
    post:
      tags:
        - comments
      summary: Create a comment
      description: create a comment
      operationId: createatest
      requestBody:
        description: Create a comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
  
  /comments/{_id}:
    put:
      tags:
        - comments
      summary: Update a comment
      description: Update comment by _id
      parameters:
        - name: _id
          in: path
          description: 'Update a name by _id'
          required: true
          schema:
            type: string
      requestBody:
        description: update a comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Update comment by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found!
        '500':
          description: Internal server error
    delete:
      tags:
        - comments
      summary: Delete a comment
      description: Delete comment 
      parameters:
        - name: _id
          in: path
          description: 'Delete a comment by _id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted!
        '404':
          description: Comment not found!
        '500':
          description: Internal server error

  /auth/login:
      post:
        tags:
          - auth
        summary: User Login
        description: User login
        operationId: userlogin
        requestBody:
          description: User Login
          content:
            application/json:
              schema:
                $ref: #/components/schemas/User
          required: true
        responses:
          '201':
            description: Login successful
            content:
              application/json:
                schema:
                  $ref: #/components/schemas/User         
          '400':
            description: Required data not provided
  /auth/signup:
      post:
        tags:
          - auth
        summary: User Signup
        description: User signup
        operationId: usersignup
        requestBody:
          description: User Signup
          content:
            application/json:
              schema:
                $ref: #/components/schemas/User
          required: true
        responses:
          '201':
            description: Singup successful
            content:
              application/json:
                schema:
                  $ref: #/components/schemas/User         
          '400':
            description: Required data not provided

  /auth/logout:
      post:
        tags:
          - auth
        summary: User Loggedout
        description: User loggedout
        operationId: userloggedout
        requestBody:
          description: User Loggedout
          content:
            application/json:
              schema:
                $ref: #/components/schemas/User
          required: true
        responses:
          '201':
            description: User Logged out successfully        
          '400':
            description: Operation falied



  

components:
  schemas:
    Comment:
      type: object
      properties:
        _id:
          type: string
        description:
          type: string
        authorId:
          type: string
        workItemId:
          type: string
        createdAt:
          type: string
          format: date
        lastUpdatedAt:
          type: string
          format: date
    Task:
      type: object
      properties:
        _id:
          type: string
        description:
          type: string
        ownerId:
          type: string
        completed:
          type: boolean
        workItemId:
          type: string
        createdAt:
          type: string
          format: date
        lastUpdatedAt:
          type: string
          format: date
    WorkItem:
      type: object
      properties:
        _id:
          type: string          
        title:
          type: string
          example: WorkItem 1
        description:
          type: string
        priority:
          type: string
          example: 2
        projectId:
          type: string
          example: 656917d02d762431eb7a1eaf
        status:
          type: string
          enum:
            - backlog
            - notstarted
            - inprogress
            - completed
        type:
          type: string
          enum:
            - story
            - feature
            - bug
        workitemId:
          type: string
        estimatedCompletionTime:
          type: integer
          format: int32
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/User'
        ownerId:
          type: string
        createdAt: 
          type: string
          format: date
        lastUpdatedAt:
          type: string
          format: date
        
    Project:
      type: object
      properties:
        _id:
          type: string
          example: 656917d02d762431eb7a1eaf
        name:
          type: string
          example: WorkWise Project
        description:
          type: string
          example: 'This is the description of WorkWise Project'
        projectOwnerId:
          type: string
          example: 656917c22d762431eb7a1eac
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        lastUpdatedAt:
          type: string
          format: date
        createdAt:
          type: string
          format: date
        teamMembers: 
          type: array
          items:
            $ref: '#/components/schemas/User'
        workitems:
          type: array
          items:
            $ref: '#/components/schemas/WorkItem'
    User:
      type: object
      properties:
        _id:
          type: string
          example: 656917d02d762431eb7a1eaf
        firstName:
          type: string
          example: Vinod
        lastName:
          type: string
          example: Jaggavarapu
        email:
          type: string
          example: vinod@gmail.com
        password:
          type: string
          example: password
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: password
      
    
      